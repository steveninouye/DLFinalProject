exports.up = function(knex, Promise) {
  return knex.schema
    .createTable('users', table => {
      table.bigIncrements('user_id');
      table
        .string('username')
        .unique()
        .notNullable();
      table.string('password');
      table.string('email');
      table.integer('num_of_repo');
      table.integer('num_of_fav');
      table.integer('num_of_followers');
      table.string('github_api_url');
      table.string('github_url');
      table.bigInteger('created_at').defaultTo(Date.now());
      table.bigInteger('updated_at').defaultTo(Date.now());
    })
    .createTable('documents', table => {
      table.bigIncrements('doc_id');
      table.string('doc_title').notNullable();
      table.string('doc_author').notNullable();
      table
        .integer('kissit_doc_author')
        .references('user_id')
        .inTable('users')
        .onDelete('cascade');
      table.text('doc_contents');
      table.string('doc_url');
      table.bigInteger('created_at').defaultTo(Date.now());
      table.bigInteger('updated_at').defaultTo(Date.now());
    })
    .createTable('user_fav_doc', table => {
      table.bigIncrements('user_fav_doc_id');
      table
        .bigInteger('user_id')
        .references('user_id')
        .inTable('users')
        .onDelete('cascade')
        .notNullable();
      table
        .bigInteger('doc_id')
        .references('doc_id')
        .inTable('documents')
        .onDelete('cascade')
        .notNullable();
      table.bigInteger('date_favorited').defaultTo(Date.now());
    })
    .createTable('user_doc_rating', table => {
      table.bigIncrements('user_doc_rating_id');
      table
        .bigInteger('rated_by')
        .references('user_id')
        .inTable('users')
        .onDelete('cascade')
        .notNullable();
      table
        .bigInteger('doc_id')
        .references('doc_id')
        .inTable('documents')
        .onDelete('cascade')
        .notNullable();
      table.integer('doc_rating').notNullable();
      table.bigInteger('date_rated').defaultTo(Date.now());
    })
    .createTable('user_fav_user', table => {
      table.bigIncrements('user_fav_user_id');
      table
        .bigInteger('user_id')
        .references('user_id')
        .inTable('users')
        .onDelete('cascade')
        .notNullable();
      table
        .bigInteger('fav_user_id')
        .references('user_id')
        .inTable('users')
        .onDelete('cascade')
        .notNullable();
      table.bigInteger('date_favorited').defaultTo(Date.now());
    })
    .createTable('repositories', table => {
      table.bigIncrements('repo_id');
      table
        .bigInteger('user_id')
        .references('user_id')
        .inTable('users')
        .onDelete('cascade');
      table.string('repo_url').notNullable();
      table.bigInteger('created_at').defaultTo(Date.now());
      table.bigInteger('updated_at').defaultTo(Date.now());
    })
    .createTable('dir_and_files', table => {
      table.bigIncrements('dir_file_id');
      table
        .bigInteger('repo_id')
        .references('repo_id')
        .inTable('repositories')
        .onDelete('cascade');
      table.string('dir_file_name');
      table.integer('level');
      table.string('dir_file_url');
      table
        .bigInteger('parent_id')
        .references('dir_file_id')
        .inTable('dir_and_files')
        .onDelete('cascade');
      table.bigInteger('created_at').defaultTo(Date.now());
      table.bigInteger('updated_at').defaultTo(Date.now());
    })
    .createTable('file_code', table => {
      table.bigIncrements('file_id');
      table
        .bigInteger('dir_file_id')
        .references('dir_file_id')
        .inTable('dir_and_files')
        .onDelete('cascade');
      table.text('file_code');
    })
    .createTable('user_code_rating', table => {
      table.bigIncrements('user_code_rating_id');
      table
        .bigInteger('rated_by')
        .references('user_id')
        .inTable('users')
        .onDelete('cascade')
        .notNullable();
      table
        .bigInteger('file_id')
        .references('file_id')
        .inTable('file_code')
        .onDelete('cascade')
        .notNullable();
      table.integer('file_rating').notNullable();
      table.bigInteger('date_rated').defaultTo(Date.now());
    })
    .createTable('user_fav_code', table => {
      table.bigIncrements('user_fav_code_id');
      table
        .bigInteger('user_id')
        .references('user_id')
        .inTable('users')
        .onDelete('cascade')
        .notNullable();
      table
        .bigInteger('file_id')
        .references('file_id')
        .inTable('file_code')
        .onDelete('cascade')
        .notNullable();
      table.bigInteger('date_favorited').defaultTo(Date.now());
    });
};

exports.down = function(knex, Promise) {
  return knex.schema
    .dropTable('user_fav_code')
    .dropTable('user_code_rating')
    .dropTable('file_code')
    .dropTable('dir_and_files')
    .dropTable('repositories')
    .dropTable('user_fav_user')
    .dropTable('user_doc_rating')
    .dropTable('user_fav_doc')
    .dropTable('documents')
    .dropTable('users');
};
